<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_blue_badge</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Determine which sprite to use for the ball

char = o_standard_client.p_char;

//determine the sprite

switch(char){

    case BLUE:
        sprite_index = s_blue_badge;
    break;
    case GREEN:
        sprite_index = s_green_badge;
    break;
    case YELLOW:
        sprite_index = s_yellow_badge;
    break;
    case PINK:
        sprite_index = s_pink_badge;
    break;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// General variables

drag = false;
start_x = -1;
start_y = -1;
orig_x = x;
orig_y = y;
end_x = -1;
end_y = -1;
friction = .1;
bounce_loss = .8;
gravity_spd = .4;
gravity = gravity_spd;

//generate anchor points for collision detection, 0 = x 1 = y
left_top_anchor[0] = x;
left_top_anchor[1] = y;

left_bottom_anchor[0] = x;
left_bottom_anchor[1] = y + sprite_height;

right_top_anchor[0] = x + sprite_width;
right_top_anchor[1] = y;

right_bottom_anchor[0] = x + sprite_width;
right_bottom_anchor[1] = y + sprite_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// undrag, launch ball!

if(drag){

    if(!mouse_check_button(mb_left)){

        drag = false;
        
        end_x = mouse_x;
        end_y = mouse_y;
        x = start_x;
        y = start_y;
        
        //Calculate speed/direction using x/y values
        
        x_speed = start_x - end_x;
        y_speed = start_y - end_y;
        
        hspeed = x_speed * .1;
        vspeed = y_speed * .1;
    
        //debug messages
        show_debug_message("START_X: " + string(start_x) + "END_X: " + string(end_x));
        show_debug_message("START_Y: " + string(start_y) + "END_Y: " + string(end_y));
    }

    if(hspeed &gt; 15) hspeed = 15;
    if(vspeed &gt; 15) vspeed = 15;
    if(hspeed &lt; -15) hspeed = -15;
    if(vspeed &lt; -15) vspeed = -15;

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw ball on x if dragging, else go back to orig_x

if(drag){
    x = mouse_x - sprite_width/2;
    y = mouse_y - sprite_height/2;
    gravity = 0;
}else{
    gravity = gravity_spd;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Don't let the ball leave the bounds of the level

if(x &lt;= 0 or x + sprite_width &gt;= room_width or y &lt;= 0 or y + sprite_height &gt;= room_height){

    if(hspeed != 0){
        //hspeed = -hspeed;
    }
    
    if(vspeed != 0){
        //vspeed = -vspeed;
    }
    
    
    if((vspeed &lt;= 0.8 or vspeed &gt;= -0.8) ){
        if(x &lt; 0){ x = 1; hspeed = -hspeed;}
        if(x + sprite_width &gt; room_width){ x = room_width - sprite_width-1; hspeed = -hspeed; }
        if(y &lt; 0){ y = 0; vspeed = -vspeed*bounce_loss;}
        if(y + sprite_height &gt; room_height){ y = room_height - sprite_height; vspeed = -vspeed*bounce_loss;}
        
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Determine if ball is draggable

if(hspeed == 0 and vspeed == 0){

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision Detection to send ball in other direction

left = false;
h_middle = false;
right = false;
up = false;
v_middle = false;
down = false;

flag_switcher = false;
last_vspeed = 0;

//Calculate the margins on top/bottom of platforms
left = x + sprite_width &lt;= other.x;
right = x &gt;= other.x + other.sprite_width;
h_middle = !(left or right);

//Calculate the margins on left/right of platforms
up = y + sprite_height &lt;= other.y;
down = y &gt;= other.y + sprite_height;
v_middle = !(up or down);


//Do calculations to determine new speed here
if((up or down) and h_middle){
    vspeed = -vspeed;
}

if((left or right) and v_middle){
    hspeed = -hspeed;
}

//Determine whether or not to set hspeed/vspeed to 0
flag_switcher = !flag_switcher;
if(vspeed == last_vspeed){
    vspeed = 0;
}else{
    last_vspeed = vspeed;
}


if(vspeed &gt;= 0.8 or vspeed &lt;= -0.8){

    if(up){ y = other.y - sprite_height-1; vspeed = -vspeed*bounce_loss;}
    if(down){ y = other.y + other.sprite_height + 1; vspeed = -vspeed*bounce_loss;}
        
}else{
    vspeed = 0;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start drag

if(hspeed == 0 and (position_empty(x, y+1) or y + sprite_height + 1 &gt;= room_height)){
    drag = true;
    start_x = mouse_x;
    start_y = mouse_y;
}else{
    show_debug_message("HSPEED: " + string(hspeed) + " VSPEED: " + string(vspeed));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
