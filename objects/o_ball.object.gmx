<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_blue_badge</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Determine which sprite to use for the ball

char = o_standard_client.p_char;

//determine the sprite

switch(char){

    case BLUE:
        sprite_index = s_blue_badge;
    break;
    case GREEN:
        sprite_index = s_green_badge;
    break;
    case YELLOW:
        sprite_index = s_yellow_badge;
    break;
    case PINK:
        sprite_index = s_pink_badge;
    break;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// General variables

drag = false;
start_x = -1;
start_y = -1;
orig_x = x;
orig_y = y;
end_x = -1;
end_y = -1;
friction = .2;
gravity = .4;

//generate anchor points for collision detection, 0 = x 1 = y
left_top_anchor[0] = x;
left_top_anchor[1] = y;

left_bottom_anchor[0] = x;
left_bottom_anchor[1] = y + sprite_height;

right_top_anchor[0] = x + sprite_width;
right_top_anchor[1] = y;

right_bottom_anchor[0] = x + sprite_width;
right_bottom_anchor[1] = y + sprite_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw ball on x if dragging, else go back to orig_x

if(drag){
    x = mouse_x;
    y = mouse_y;
}else{

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Don't let the ball leave the bounds of the level

if(x &lt;= 0 or x + sprite_width &gt;= room_width or y &lt;= 0 or y + sprite_height &gt;= room_height){

    if(hspeed != 0){
        hspeed = -hspeed;
    }
    
    if(vspeed != 0){
        vspeed = -vspeed;
    }
    
    if( (hspeed &lt;= 0.2 or hspeed &gt;= -0.2) and (vspeed &lt;= 0.2 or vspeed &gt;= -0.2) ){
        if(x &lt; 0){ x = 0; }
        if(x + sprite_width &gt; room_width){ x = room_width - sprite_width; }
        if(y &lt; 0){ y = 0; }
        if(y + sprite_height &gt; room_height){ y = room_height - sprite_height;}
        
        if(hspeed &lt;= 0.2 or hspeed &gt;= -0.2) hspeed = 0;
        if(vspeed &lt;= 0.2 or vspeed &gt;= -0.2) vspeed = 0;
        
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Determine if ball is draggable

if(hspeed == 0 and vspeed == 0){

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// undrag, launch ball!

drag = false;

end_x = mouse_x;
end_y = mouse_y;

//Calculate speed/direction using x/y values

x_speed = start_x - end_x;
y_speed = start_y - end_y;

hspeed = x_speed * .05;
vspeed = y_speed * .05;

if(hspeed &gt; 15) hspeed = 15;
if(vspeed &gt; 15) vspeed = 15;
if(hspeed &lt; -15) hspeed = -15;
if(vspeed &lt; -15) vspeed = -15;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start drag

if(hspeed == 0 and vspeed == 0){
    drag = true;
    start_x = mouse_x;
    start_y = mouse_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
