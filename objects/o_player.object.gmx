<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_yellow_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set variables for controllers

//player variables
player_speed = 5;
image_speed = .2;
hazard_speed = 6;
friction = .3;
player = 1;

//keyboard inputs
up = false;
down = false;
left = false;
right = false;

//Sprite variables
s_walking = s_yellow_walk;
s_jumping = s_yellow_jump;
s_idle = s_yellow_idle;

//animation variables
jumping = false;
hurt = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Determine which keys are pressed (for p1)
if(player == 1){

    if(keyboard_check(vk_right) or keyboard_check(ord('D'))){
        right = true;
    }else{
        right = false;
    }   
    
    if(keyboard_check(vk_left) or keyboard_check(ord('A'))){
        left = true;
    }else{
        left = false;
    }
    
    if(keyboard_check(vk_up) or keyboard_check(ord('W')) or keyboard_check(vk_space)){
        up = true;
    }else{
        up = false;
    }
    
    if(keyboard_check(vk_down) or keyboard_check(ord('S'))){
        down = true;
    }else{
        down = false;
    }

}else if(player == 2){

    if(keyboard_check(ord('L'))){
        right = true;
    }else{
        right = false;
    }   
    
    if(keyboard_check(ord('J'))){
        left = true;
    }else{
        left = false;
    }
    
    if(keyboard_check(ord('I'))){
        up = true;
    }else{
        up = false;
    }
    
    if(keyboard_check(ord('K'))){
        down = true;
    }else{
        down = false;
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement script

//Variables to track net_change over steps
x_net_change = 0;
if(!hurt){

//Moving left/right
    if(right &amp;&amp; place_free(x+player_speed, y) and !left){
        if(place_free(x,y+1)){
            if(place_free(x + player_speed, y + vspeed)){
                //sprite_index = s_walking;
                //image_xscale = 1;
                x += player_speed;
                x_net_change += player_speed;
            }
        }else{
            //sprite_index = s_walking;
            //image_xscale = 1;
            x += player_speed;
            x_net_change += player_speed;
        }
    }else if(left &amp;&amp; place_free(x-player_speed, y) and !right){
        if(place_free(x,y+1)){
            if(place_free(x - player_speed, y + vspeed)){
                x -= player_speed;
                x_net_change -= player_speed;
                //image_xscale = -1;
                //sprite_index = s_walking;
            }
        }else{
            x -= player_speed;
            x_net_change -= player_speed;
            //image_xscale = -1;
            //sprite_index = s_walking;
        }
    }else{
        //image_xscale = 1;
        //sprite_index = s_idle;
    }
    
    // Gravity
    if(place_free(x, y+1)){
        //sprite_index = s_jumping;
        gravity = .75;
        
        //Set max fall speed
        if(vspeed &gt;= 10)
            vspeed = 10;    
    }else{
        gravity = 0;
        
        //Jumping
        if(up){
            vspeed = -15;
        }
    }
    
}else{
    if(hspeed == 0){
        hurt = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation script
// Apply the correct animations when needed (for example jumping/running)

if(!hurt){

    //walking
    if((!right and !left) or (right and left)){
        sprite_index = s_idle;
    }else if(right){
        image_xscale = 1;
        sprite_index = s_walking;
    }else if(left){
        image_xscale = -1;
        sprite_index = s_walking;
    }
    if(vspeed != 0 or place_free(x, y+2)){
        //jumping
        sprite_index = s_jumping;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_hazard">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Throw the player in the other direction by x pixels

//If I want the player to be knocked back
var direction_x = image_xscale;

hspeed -= direction_x * hazard_speed;
vspeed -= 12;

hit = true;
sprite_index = s_yellow_hurt;

//Alternate version if I want the player to explode into blood
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide with solid
move_contact_solid(direction, -1);
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
