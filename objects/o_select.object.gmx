<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set some variables, children will need to overrite

//Variables same for all
selected = false;

//Variables needing to be overriden
s_idle = s_yellow_idle;
s_jump = s_yellow_jump;
s_selected = s_yellow_selected;
s_char = YELLOW;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do collision detection to see if it is colliding with a mouse

if(!selected){
    var buffer = 5; // Buffer to delete empty space around the image
    if(noone == collision_rectangle(x+buffer, y+buffer, x + sprite_width *image_xscale - buffer, y + sprite_height * image_yscale - buffer, o_cursor, true, false)){
        sprite_index = s_idle;
    }else{
        sprite_index = s_jump;
    }

}else{
    sprite_index = s_selected;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the selected for the player

//tell if correct cursor is colliding with the image

collision = false;
var buffer = 5;

switch(o_standard_client.p_id){
    case 0:
        if(collision_rectangle(x + buffer, y + buffer, x + sprite_width * image_xscale - buffer, y + sprite_height * image_yscale - buffer, o_cursor1, true, false) != noone)
        collision = true;
    break;
    case 1:
        if(collision_rectangle(x + buffer, y + buffer, x + sprite_width * image_xscale - buffer, y + sprite_height * image_yscale - buffer, o_cursor2, true, false) != noone)
        collision = true;
    break;
    case 2:
        if(collision_rectangle(x + buffer, y + buffer, x + sprite_width * image_xscale - buffer, y + sprite_height * image_yscale - buffer, o_cursor3, true, false) != noone)
        collision = true;
    break;
    case 3:
        if(collision_rectangle(x + buffer, y + buffer, x + sprite_width * image_xscale - buffer, y + sprite_height * image_yscale - buffer, o_cursor4, true, false) != noone)
        collision = true;
    break;
}

if(collision){
    
        //send code to server letting it know it has been selected
        var buffer = buffer_create(256, buffer_grow, 1);
        buffer_seek(buffer, buffer_seek_start, 0);
        buffer_write(buffer, buffer_u16, CHAR_SELECT);
        buffer_write(buffer, buffer_u16, s_char);
        
        network_send_packet(o_standard_client.client_socket, buffer, buffer_tell(buffer));
        
        buffer_delete(buffer);
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
