<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the server and additional goodies

//Variables
socket = 8000;
max_users = 4;

//create the socketlist
socket_list = ds_list_create();

server_socket = network_create_server(network_socket_tcp, socket, max_users);
if( server_socket &lt; 0){
    //Error occurred 
    show_debug_message("Server Could Not Be Created");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Character Select Variables

p1_char = 0;
p2_char = 0;
p3_char = 0;
p4_char = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manage player count as well as the next button

player_count = ds_list_size(socket_list);

if(player_count &gt; 1){
    
    switch(player_count){
        case 2:
            if(p1_char != 0 and p2_char != 0){
                o_char_next.clickable = true;  
            }else{
                o_char_next.clickable = false;
            }
        break;
        case 3:
            if(p1_char != 0 and p2_char != 0 and p3_char != 0){
                o_char_next.clickable = true;  
            }else{
                o_char_next.clickable = false;
            }
        break;
        case 4:
            if(p1_char != 0 and p2_char != 0 and p3_char != 0 and p4_char != 0){
                o_char_next.clickable = true;  
            }else{
                o_char_next.clickable = false;
            }
        break;
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect client connections
var n_id = ds_map_find_value(async_load, "id"); // Get the id of the socket
if n_id == server_socket{

    var t = ds_map_find_value(async_load, "type"); // Get the type of network event
    switch(t){
        case network_type_connect:
            var sock = ds_map_find_value(async_load, "socket"); // store id of connection
            ds_list_add(socket_list, sock);
            send_client_id(sock, ds_list_size(socket_list)-1);
            send_clients_playercount(socket_list);
            //send_clients_selected(socket_list);
        break;
        case network_type_disconnect:
            var sock = ds_map_find_value(async_load, "socket"); // store id of connection
            ds_map_delete(socket_list, sock);
        break;
        case network_type_data:
            //Data handling here
        break;
    }
        
}

// Check to make sure socket exists
for(var i = 0; i &lt; ds_list_size(socket_list); i++){
    sock = ds_list_find_value(socket_list, i);
    if(n_id == sock){
        var buffer = ds_map_find_value(async_load, "buffer");
        var socket = ds_map_find_value(async_load, "id");
        var inst = ds_list_find_index(socket_list, socket );
        buffer_seek(buffer, buffer_seek_start, 0);
        Received_Packet(buffer, socket, inst);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
