<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables for the clients

p_id = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send Mouse location if it is in the character select (only time it's important)

//If in char select
if(room == r_character_select){

    var t_buffer = buffer_create(256, buffer_grow, 1);
    buffer_seek(t_buffer, buffer_seek_start, 0);
    buffer_write(t_buffer, buffer_u16, MOUSE);
    buffer_write(t_buffer, buffer_u16, mouse_x);
    buffer_write(t_buffer, buffer_u16, mouse_y);
    
    network_send_packet(client_socket, t_buffer, buffer_tell(t_buffer));
    
    buffer_delete(t_buffer);

}

// Adjust cursor on players screen based on their id
if(p_id == 0){
    o_cursor1.x = mouse_x;
    o_cursor1.y = mouse_y;
}else if(p_id == 1){
    o_cursor2.x = mouse_x;
    o_cursor2.y = mouse_y;
}else if(p_id == 2){
    o_cursor3.x = mouse_x;
    o_cursor3.y = mouse_y;
}else if(p_id == 3){
    o_cursor4.x = mouse_x;
    o_cursor4.y = mouse_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send data to the server

//show_debug_message("Sending Data to Server: Left Click");

var t_buffer = buffer_create(256, buffer_grow, 1);
buffer_seek(t_buffer, buffer_seek_start, 0);
buffer_write(t_buffer, buffer_u16, TEST);
buffer_write(t_buffer, buffer_string, "Client_Packet");
//More data here
network_send_packet(client_socket, t_buffer, buffer_tell(t_buffer));
buffer_delete(t_buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle data from server

var n_id = ds_map_find_value(async_load, "id");
if n_id == client_socket{
    //New Packet from the server
    
    var buffer = ds_map_find_value(async_load, "buffer");
    buffer_seek(buffer, buffer_seek_start, 0);
    
    var msgid = buffer_read(buffer, buffer_u16);
    //show_debug_message("Got : " + string(msgid));
    
    switch(msgid){
        case TEST:
            var msg = buffer_read(buffer, buffer_string);
            show_debug_message(msg);
        break;
        case MOUSE: //Mouse data for all cursors
            if(room == r_character_select){
            
                var mous_x = buffer_read(buffer, buffer_s16);
                var mous_y = buffer_read(buffer, buffer_s16);
                //Determine which mouse the server shouldn't move for the player
                //if(p_id != 0){
                    o_cursor1.x = mous_x;
                    o_cursor1.y = mous_y;
                //}
                
                mous_x = buffer_read(buffer, buffer_s16);
                mous_y = buffer_read(buffer, buffer_s16);
                //if(p_id != 1){
                    //show_debug_message("Mouse X: " + string(mous_x) + " Mouse Y: " + string(mous_y));
                    o_cursor2.x = mous_x;
                    o_cursor2.y = mous_y;
                //}
                
                mous_x = buffer_read(buffer, buffer_s16);
                mous_y = buffer_read(buffer, buffer_s16);
                //if(p_id != 2){
                    o_cursor3.x = mous_x;
                    o_cursor3.y = mous_y;
                //}
                
                mous_x = buffer_read(buffer, buffer_s16);
                mous_y = buffer_read(buffer, buffer_s16);
                //if(p_id != 3){
                    o_cursor4.x = mous_x;
                    o_cursor4.y = mous_y;
                //}
            }
            
        break;
        case PLAYER_ID: // Set the id of the player
            p_id = buffer_read(buffer, buffer_u16);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
